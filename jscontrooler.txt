markup
<aura:component Controller ="AuraApexforContact" implements="force:appHostable,flexipage:availableForAllPageTypes,flexipage:availableForRecordHome,force:hasRecordId,forceCommunity:availableForAllPageTypes,force:lightningQuickAction" access="global" >
	    <aura:attribute name="Amount" type="double" default="5000"/>  
        <aura:attribute name="Rateofinterest" type="double" default="8"/>
        <aura:attribute name="Maturityamount" type="double" default="0"/> 
    
    <aura:attribute name="contactid" type="String" />
    <aura:attribute name="contactname" type="String" /> 
    
       <ui:inputtext label="Cpntact id" value="{!v.contactid}"/> 
        ContactName  <ui:outputtext  value="{!v.contactname}"/> 
    
          <ui:inputNumber label="Coupon amount" value="{!v.Amount}"/>  
          <ui:inputNumber aura:id="roi"  label="Rate of Interest" value="{!v.Rateofinterest}"/>
           Maturity Value :<ui:outputNumber  value="{!v.Maturityamount}"/>
    <br/>
    <lightning:button variant="brand" label="Calculate"  onclick="{!c.calculate}"/>     
    <lightning:button variant="brand" label="Store value"  onclick="{!c.storedata}"/> 
      <lightning:button variant="brand" label="Get value"  onclick="{!c.getdata}"/> 
    
    <aura:handler name="change" value="{!v.Rateofinterest}" action="{!c.validatetheroi}"/>    
      <aura:handler name="change" value="{!v.contactid}" action="{!c.getname}"/>
</aura:component>

({
    calculate: function(component, event, helper) {
        if(component.get("v.Rateofinterest") <9){
            
            var amt  = component.get("v.Amount");
            var roi  =   component.get("v.Rateofinterest");
            var finalamt = roi/100 *amt +amt;
            component.set("v.Maturityamount",finalamt);
            //this is being done to clear the previous error message if any.
            
        } 
    },
    
    validatetheroi :function(component, event, helper) {
        // debugger;
        var field = component.find("roi");
        if(field.get("v.value") >9 ){
            
            field.set("v.errors",[{message :'Value cant be greater than 9'}]);
        } else{//empty error message if there are none,to clear previous error messages
            field.set("v.errors",[{message :''}]);
        }
    },
    
    storedata :function(component ,event,helper){
        sessionStorage.setItem("lastvalue", component.get("v.Amount"));
    },
    
    getdata :function(component ,event,helper){
        var z= 	sessionStorage.getItem("lastvalue");
        console.log(z);
      
    },
    getname : function(component,event,helper){
        debugger;
        var action = component.get("c.getcontactname");
        action.setParams({contactid : component.get("v.contactid") });
         action.setCallback(this,function(a){
                component.set("v.contactname",a.getReturnValue());
                //console.log(a.getState());
            } );
        $A.enqueueAction(action);
    }
})

apex

public  with sharing class AuraApexforContact {
 public static String Name ='';
   @AuraEnabled public static String getcontactname(String contactid){
        try{
        Name = [select name from contact where id  = :contactid limit 1].Name;
        }catch(Exception e){
            
            return e.getMessage();
        }
        return Name;
    }

}
